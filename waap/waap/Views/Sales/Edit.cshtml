@model wapp.Models.Sale
@{
    ViewData["Title"] = "Edit Sale";
}

<h2>Edit Sale</h2>

<form asp-action="Edit" method="post">
    @* Anti-forgery token *@
    @Html.AntiForgeryToken()

    <div class="mb-3">
        <label asp-for="Identifier"></label>
        <input asp-for="Identifier" class="form-control" />
        <span asp-validation-for="Identifier" class="text-danger"></span>
    </div>

    <div class="row">
        <div class="col-md-6 mb-3">
            <label asp-for="Date"></label>
            <input asp-for="Date" class="form-control" type="date" />
            <span asp-validation-for="Date" class="text-danger"></span>
        </div>
        <div class="col-md-6 mb-3">
            <label asp-for="Time"></label>
            <input asp-for="Time" class="form-control" type="time" />
            <span asp-validation-for="Time" class="text-danger"></span>
        </div>
    </div>

    <div class="mb-3">
        <label asp-for="ClientId"></label>
        <input asp-for="ClientId" class="form-control" />
        <span asp-validation-for="ClientId" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Observations"></label>
        <textarea asp-for="Observations" class="form-control"></textarea>
        <span asp-validation-for="Observations" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="FinalValue"></label>
        <input asp-for="FinalValue" class="form-control" />
        <span asp-validation-for="FinalValue" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="State"></label>
        <select asp-for="State" class="form-select">
            @* Fill with your enum's possible values, etc. *@
            <option value="0">Pending</option>
            <option value="1">Completed</option>
            <!-- etc. -->
        </select>
        <span asp-validation-for="State" class="text-danger"></span>
    </div>

    <div class="mb-3 form-check">
        <input asp-for="IsPaid" class="form-check-input" />
        <label asp-for="IsPaid" class="form-check-label"></label>
        <span asp-validation-for="IsPaid" class="text-danger"></span>
    </div>

    @* Hidden field for the Sale ID *@
    <input type="hidden" asp-for="Id" />

    <hr />

    <h4>Sale Products</h4>

    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Product Id</th>
                <th>Quantity</th>
                <th>Order Price</th>
                <th>Remove?</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.SaleProducts.Count; i++)
            {
                <tr>
                    <!-- Hidden field for the SaleProduct Id -->
                    <td>
                        <input type="hidden"
                               asp-for="@Model.SaleProducts[i].Id" />
                        <input type="hidden"
                               asp-for="@Model.SaleProducts[i].SaleId" />

                        <!-- Here you can do a dropdown or just a text input for ProductId -->
                        <input asp-for="@Model.SaleProducts[i].ProductId" class="form-control" />
                    </td>
                    <td>
                        <input asp-for="@Model.SaleProducts[i].Quantity" class="form-control" />
                    </td>
                    <td>
                        <input asp-for="@Model.SaleProducts[i].OrderPrice" class="form-control" />
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger"
                                onclick="removeRow(this)">
                            X
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Optionally, button to add a new row with JavaScript (Id=0 => new) -->
    <button type="button" class="btn btn-secondary" onclick="addNewRow()">Add New Line</button>

    <br /><br />

    <button type="submit" class="btn btn-primary">Save</button>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        function removeRow(button) {
            // Remove the row from the DOM
            var row = button.closest('tr');
            row.parentNode.removeChild(row);
            // Setting the hidden ID to 0 can also help indicate "removed" if needed
        }

        function addNewRow() {
            // This is a minimal example of client-side row insertion.
            // For a robust solution, you'd clone a hidden template or handle indexes more carefully.
            let tableBody = document.querySelector("table tbody");
            let newIndex = document.querySelectorAll("table tbody tr").length;

            let newRow = document.createElement("tr");
            newRow.innerHTML = `
                <td>
                    <input type="hidden" name="SaleProducts[${newIndex}].Id" value="0"/>
                    <input type="hidden" name="SaleProducts[${newIndex}].SaleId" value="@Model.Id"/>
                    <input class="form-control" type="text" name="SaleProducts[${newIndex}].ProductId" value=""/>
                </td>
                <td>
                    <input class="form-control" type="number" name="SaleProducts[${newIndex}].Quantity" value="1"/>
                </td>
                <td>
                    <input class="form-control" type="number" step="0.01" name="SaleProducts[${newIndex}].OrderPrice" value="0"/>
                </td>
                <td>
                    <button type="button" class="btn btn-danger" onclick="removeRow(this)">X</button>
                </td>
            `;
            tableBody.appendChild(newRow);
        }
    </script>
}
